@model LilleHaboov.Models.CatagoriesProductViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Product.Id)


        <div class="form-group form-inline">
            @Html.LabelFor(model => model.Catagories, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="catagoriesMenu" class="form-control" name="Catagories">
                    @foreach (var item in Model.Catagories)
                    {
                        <option value="@item.Id">@item.Name</option>
                    }
                </select>
                <button id="AddCatagory" type="button" class="btn btn-primary">+</button>
            </div>
        </div>

        <div class="form-group form-inline">
            <label class="control-label col-md-2">Selected Catagories</label>
            <div class="col-md-10 tagsinput-singleLine">
                <input id="selectedCatagories" name="selectedCatagories" class="form-control" />
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.Product.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Product.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Product.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Product.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Product.LongDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Product.LongDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product.LongDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Product.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Product.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product.Price, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Product.Currency, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Product.Currency, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Product.Currency, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group form-inline">
            <label class="control-label col-md-2">New Image</label>
            <div class="col-md-10">
                <input id="imagesMenu" type="text" class="form-control" name="Images" />
                <button id="AddImage" type="button" class="btn btn-primary">+</button>
            </div>
        </div>

        <div class="form-group form-inline">
            @Html.LabelFor(model => model.Product.Images, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 tagsinput-singleLine">
                <input id="selectedImages" name="selectedImages" class="form-control" />
            </div>
        </div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


<script>

    $(document).ready(function () {
        $('#selectedCatagories').tagsinput({
            allowDuplicates: false,
            freeInput: false,
            itemValue: 'id',
            itemText: 'label'
        });
        $("#selectedImages").tagsinput({
            allowDuplicates: true,
            freeInput: false,
        });

        var catagories = @Html.Raw(Json.Encode(Model.Product.Catagories.Select(c => new { id = c.Id, label = c.Name })));
        var images = @Html.Raw(Json.Encode(Model.Product.Images.Select(i => i.Url)));
        catagories.forEach((c) => {
            $("#selectedCatagories").tagsinput("add", c);
        });
        images.forEach((i) => {
            $("#selectedImages").tagsinput("add", i);
        });

        $("#AddCatagory").click(function () {

            $("#selectedCatagories").tagsinput("add", { id: $("#catagoriesMenu > :selected").val(), label: $("#catagoriesMenu > :selected").text() });

        });

        $("#AddImage").click(function () {
            if ($("#imagesMenu").val().indexOf(",") > -1) {
                $("#imagesMenu")[0].setCustomValidity('Comma (,) is not allowed');
                $("#imagesMenu")[0].reportValidity();
            } else {
                $("#selectedImages").tagsinput("add", $("#imagesMenu").val());
                $("#imagesMenu").val("");
                $("#imagesMenu")[0].setCustomValidity('');
            }
        });

    });
</script>
